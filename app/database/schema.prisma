generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "refresh_token_session_id")
  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  refreshed_at   DateTime?        @db.Timestamp(6)
  user_agent     String?
  ip             String?          @db.Inet
  tag            String?
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                   String?                         @db.Uuid
  id                            String                          @id @db.Uuid
  aud                           String?                         @db.VarChar(255)
  role                          String?                         @db.VarChar(255)
  email                         String?                         @db.VarChar(255)
  encrypted_password            String?                         @db.VarChar(255)
  email_confirmed_at            DateTime?                       @db.Timestamptz(6)
  invited_at                    DateTime?                       @db.Timestamptz(6)
  confirmation_token            String?                         @db.VarChar(255)
  confirmation_sent_at          DateTime?                       @db.Timestamptz(6)
  recovery_token                String?                         @db.VarChar(255)
  recovery_sent_at              DateTime?                       @db.Timestamptz(6)
  email_change_token_new        String?                         @db.VarChar(255)
  email_change                  String?                         @db.VarChar(255)
  email_change_sent_at          DateTime?                       @db.Timestamptz(6)
  last_sign_in_at               DateTime?                       @db.Timestamptz(6)
  raw_app_meta_data             Json?
  raw_user_meta_data            Json?
  is_super_admin                Boolean?
  created_at                    DateTime?                       @db.Timestamptz(6)
  updated_at                    DateTime?                       @db.Timestamptz(6)
  phone                         String?                         @unique
  phone_confirmed_at            DateTime?                       @db.Timestamptz(6)
  phone_change                  String?                         @default("")
  phone_change_token            String?                         @default("") @db.VarChar(255)
  phone_change_sent_at          DateTime?                       @db.Timestamptz(6)
  confirmed_at                  DateTime?                       @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current    String?                         @default("") @db.VarChar(255)
  email_change_confirm_status   Int?                            @default(0) @db.SmallInt
  banned_until                  DateTime?                       @db.Timestamptz(6)
  reauthentication_token        String?                         @default("") @db.VarChar(255)
  reauthentication_sent_at      DateTime?                       @db.Timestamptz(6)
  is_sso_user                   Boolean                         @default(false)
  deleted_at                    DateTime?                       @db.Timestamptz(6)
  identities                    identities[]
  mfa_factors                   mfa_factors[]
  sessions                      sessions[]
  helpful_votes_ideas_duplicate helpful_votes_ideas_duplicate[]
  profiles                      profiles?
  profiles_duplicate            profiles_duplicate?
  ratings_duplicate             ratings_duplicate[]
  versions_duplicate            versions_duplicate[]

  @@index([instance_id])
  @@schema("auth")
}

model add_link {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  username   String?
  link       String?
  version_id Int?
  versions   versions? @relation(fields: [version_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model artist_suggestions {
  id           Int      @id @unique @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  submitter_id String?  @default(dbgenerated("auth.uid()")) @db.Uuid
  name         String?
  votes        Int?     @default(1) @db.SmallInt

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model artists {
  id             Int              @id(map: "Artists_pkey") @default(autoincrement())
  artist         String           @unique(map: "Artists_artist_key")
  ratings        Int
  end_year       Int?             @db.SmallInt
  start_year     Int?             @db.SmallInt
  url            String?
  emoji_code     String?          @default("0x2764")
  nickname       String?
  name_for_order String?          @default("")
  jam_count      Int?             @default(0)
  data_source    DataSource?
  musicbrainz_id String?          @db.Uuid
  sites          String[]
  jams           jams[]
  jams_duplicate jams_duplicate[]
  sets           sets[]
  shows          shows[]
  tours          tours[]

  @@schema("public")
}

model eggy_songs {
  id              Int       @id(map: "goose_songs_pkey")
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model goose_songs {
  id              Int       @id(map: "goose_songs_pkey1")
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model helpful_votes_ideas {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  idea_id    Int
  user_name  String
  counter    Int?      @default(1) @db.SmallInt
  vote       Int       @default(1) @db.SmallInt
  profile_id String?   @db.Uuid
  ideas      ideas     @relation(fields: [idea_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles   profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model helpful_votes_ideas_duplicate {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  idea_id      Int
  user_name    String
  counter      Int?      @default(1) @db.SmallInt
  vote         Int       @default(1) @db.SmallInt
  submitter_id String?   @db.Uuid
  ideas        ideas     @relation(fields: [idea_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?    @relation(fields: [submitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model helpful_votes_ratings {
  id         Int       @id(map: "helpful_votes_reviews_pkey") @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  rating_id  Int?
  user_name  String
  counter    Int?      @default(1) @db.SmallInt
  vote       Int       @default(1) @db.SmallInt
  profile_id String?   @db.Uuid
  profiles   profiles? @relation(fields: [profile_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ratings    ratings?  @relation(fields: [rating_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "helpful_votes_reviews_rating_id_fkey")

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model ideas {
  id                            Int                             @id @default(autoincrement())
  created_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  user_name                     String?
  body                          String?
  votes                         Int                             @default(1)
  done                          Boolean?                        @default(false)
  profile_id                    String?                         @db.Uuid
  type                          idea?
  helpful_votes_ideas           helpful_votes_ideas[]
  helpful_votes_ideas_duplicate helpful_votes_ideas_duplicate[]
  profiles                      profiles?                       @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@schema("public")
}

model issues {
  id          Int       @id @default(autoincrement())
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  broken_link Boolean?  @default(false)
  issue       String?
  username    String?
  version_id  BigInt?
  handled     Boolean?  @default(false)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jams {
  id                  Int           @id @default(autoincrement())
  date                String
  avg_rating          Float         @default(0) @db.Real
  location            String?
  submitter_name      String?
  artist              String
  song_id             Int
  user_id             String?       @db.Uuid
  listen_link         String?
  song_name           String?
  num_ratings         Int?          @default(0)
  song_submitter_name String?
  sounds              String[]
  set_id              Int?
  show_id             Int?
  venue_id            Int?
  artist_id           Int?
  sound_ids           String[]
  year                Int?          @db.SmallInt
  month               Int?          @db.SmallInt
  day                 Int?          @db.SmallInt
  entity              MusicalEntity @default(Jam)
  likes               Int?          @default(0)
  favorites           Int?          @default(0)
  artists             artists?      @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sets                sets?         @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shows               shows?        @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  songs               songs         @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venues              venues?       @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ratings             ratings[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model jams_duplicate {
  id                  Int       @id @default(autoincrement())
  date                String
  avg_rating          Float     @default(0) @db.Real
  location            String?
  submitter_name      String?
  artist              String
  song_id             Int
  user_id             String?   @db.Uuid
  listen_link         String?
  song_name           String?
  num_ratings         Int?      @default(0)
  song_submitter_name String?
  sounds              String[]
  set_id              Int?
  show_id             Int?
  venue_id            Int?
  artist_id           Int?
  sound_ids           String[]
  year                Int?      @db.SmallInt
  month               Int?      @db.SmallInt
  day                 Int?      @db.SmallInt
  created_at          DateTime? @default(now()) @db.Date
  artists             artists?  @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sets                sets?     @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shows               shows?    @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  songs               songs     @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venues              venues?   @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model jams_lists {
  id         Int       @id(map: "jams_lists_duplicate_pkey") @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  query      String?   @unique(map: "jams_lists_duplicate_query_key")
  params     String?   @unique(map: "jams_lists_duplicate_params_key")

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model kglw_songs {
  id              Int       @id
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model lists {
  id         Int       @id(map: "lists_duplicate_pkey") @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  url        String?
  query      String?

  @@schema("public")
}

model neighbor_songs {
  id              Int       @id
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model phishnet_jamcharts {
  songid          Int     @id
  song            String?
  slug            String?
  abbr            String?
  artist          String?
  debut           String?
  last_played     String?
  times_played    BigInt?
  last_permalink  String?
  debut_permalink String?
  gap             BigInt?

  @@schema("public")
}

model phishnet_shows {
  showid             Int     @id
  showyear           BigInt?
  showmonth          BigInt?
  showday            BigInt?
  showdate           String?
  permalink          String?
  exclude_from_stats String?
  venueid            BigInt?
  setlist_notes      String?
  venue              String?
  city               String?
  state              String?
  country            String?
  artistid           BigInt?
  artist_name        String?
  tourid             BigInt?
  tour_name          String?
  created_at         String?
  updated_at         String?

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model phishnet_songs {
  songid          Int     @id(map: "phish-songs_pkey")
  song            String?
  slug            String?
  abbr            String?
  artist          String?
  debut           String?
  last_played     String?
  times_played    BigInt?
  last_permalink  String?
  debut_permalink String?
  gap             BigInt?

  @@schema("public")
}

model phishnet_songs_duplicate {
  songid          Int     @id
  song            String?
  slug            String?
  abbr            String?
  artist          String?
  debut           String?
  last_played     String?
  times_played    BigInt?
  last_permalink  String?
  debut_permalink String?
  gap             BigInt?

  @@schema("public")
}

model phishnet_venues {
  venueid    Int     @id
  venuename  String?
  city       String?
  state      String?
  country    String?
  venuenotes String?
  alias      BigInt?
  short_name String?

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model profiles {
  id                    String                  @id @db.Uuid
  updated_at            DateTime?               @db.Timestamptz(6)
  name                  String                  @unique(map: "profiles_username_key")
  avatar_url            String?
  can_write             Boolean                 @default(true)
  points                Int                     @default(10)
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  favorites             favorites[]
  helpful_votes_ideas   helpful_votes_ideas[]
  helpful_votes_ratings helpful_votes_ratings[]
  ideas                 ideas[]
  likes                 likes[]
  users                 users                   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ratings               ratings[]
  sets                  sets[]
  shows                 shows[]
  songs                 songs[]

  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model profiles_duplicate {
  id         String    @id @db.Uuid
  updated_at DateTime? @db.Timestamptz(6)
  name       String    @unique(map: "profiles_duplicate_username_key")
  avatar_url String?
  can_write  Boolean   @default(true)
  points     Int       @default(10)
  users      users     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model ratings {
  id                    Int                     @id(map: "Ratings_pkey") @default(autoincrement())
  created_at            DateTime?               @default(now()) @db.Timestamptz(6)
  delete                String?                 @db.Uuid
  rating                Int?                    @db.SmallInt
  comment               String?
  helpful               Int                     @default(0)
  version_id            Int?
  submitter_name        String?
  profile_id            String                  @db.Uuid
  entity_type           MusicalEntity           @default(Jam)
  entity_id             Int?
  jam_id                Int?
  set_id                Int?
  show_id               Int?
  helpful_votes_ratings helpful_votes_ratings[]
  jams                  jams?                   @relation(fields: [jam_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles              profiles                @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  sets                  sets?                   @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shows                 shows?                  @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([profile_id, entity_type, entity_id], map: "userid_entitytype_entityid")
  @@schema("public")
}

model ratings_duplicate {
  id                 Int                @id @default(autoincrement())
  created_at         DateTime?          @default(now()) @db.Timestamptz(6)
  delete             String?            @db.Uuid
  rating             Int?               @db.SmallInt
  comment            String?
  helpful            Int                @default(0)
  funny              Int                @default(0)
  version_id         Int
  submitter_name     String
  user_id            String?            @db.Uuid
  users              users?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions_duplicate versions_duplicate @relation(fields: [version_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sets {
  id             Int              @id @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  artist_id      Int?
  setlist        String[]
  vibes          String[]
  profile_id     String?          @db.Uuid
  show_id        Int?
  multi_song     String[]
  song_ids       Int[]
  sound_ids      BigInt[]
  entity         MusicalEntity    @default(Set)
  festival       Boolean?         @default(false)
  set_number     SetNumber        @default(set_2)
  date           String
  location       String?
  venue_id       Int?
  avg_rating     Float?           @db.Real
  num_ratings    Int?
  likes          Int?             @default(0)
  favorites      Int?             @default(0)
  jams           jams[]
  jams_duplicate jams_duplicate[]
  ratings        ratings[]
  artists        artists?         @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles       profiles?        @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shows          shows?           @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venues         venues?          @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions       versions[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shows {
  id             Int              @id @default(autoincrement())
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  date           DateTime?        @db.Date
  artist_id      Int?
  song_ids       Int[]
  vibes          String[]
  profile_id     String?          @db.Uuid
  venue_id       Int?
  tour_id        Int?
  day            Int?             @db.SmallInt
  month          Int?             @db.SmallInt
  year           Int?             @db.SmallInt
  sound_ids      Int[]
  date_text      String?
  location       String?
  entity         MusicalEntity    @default(Show)
  set_ids        Int[]
  likes          Int?             @default(0)
  favorites      Int?             @default(0)
  avg_rating     Float?           @db.Real
  num_ratings    Int              @default(0)
  jams           jams[]
  jams_duplicate jams_duplicate[]
  ratings        ratings[]
  sets           sets[]
  artists        artists?         @relation(fields: [artist_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles       profiles?        @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tours          tours?           @relation(fields: [tour_id], references: [id], onDelete: NoAction)
  venues         venues?          @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions       versions[]

  @@schema("public")
}

model songs {
  id                 Int                  @id(map: "Songs_pkey") @default(autoincrement())
  song               String
  cover              Boolean              @default(false)
  ratings            Int                  @default(0)
  submitter_name     String?
  artist             String?
  submitter_id       String?              @db.Uuid
  emoji_code         String?
  jams               jams[]
  jams_duplicate     jams_duplicate[]
  profiles           profiles?            @relation(fields: [submitter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  versions           versions[]
  versions_duplicate versions_duplicate[]

  @@schema("public")
}

model sounds {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  label      String?
  text       String?

  @@schema("public")
}

model tab_songs {
  showid               BigInt?
  showdate             String?
  permalink            String?
  showyear             BigInt?
  uniqueid             Int     @id
  meta                 String?
  reviews              String?
  exclude              String?
  setlistnotes         String?
  soundcheck           String?
  songid               BigInt?
  position             BigInt?
  transition           BigInt?
  footnote             String?
  set                  String?
  isjam                String?
  isreprise            String?
  isjamchart           String?
  jamchart_description String?
  tracktime            String?
  gap                  String?
  tourid               BigInt?
  tourname             String?
  tourwhen             String?
  song                 String?
  nickname             String?
  slug                 String?
  is_original          String?
  venueid              BigInt?
  venue                String?
  city                 String?
  state                String?
  country              String?
  trans_mark           String?
  artistid             BigInt?
  artist_slug          String?
  artist_name          String?

  @@schema("public")
}

model tapers_choice_songs {
  id              Int       @id
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

model tours {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  artist_id  Int?
  year       String?
  continent  Continent?
  region     Region[]
  season     Season?
  shows      shows[]
  artists    artists?   @relation(fields: [artist_id], references: [id], onDelete: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model um_songs {
  id              Int       @id
  name            String?
  slug            String?
  isoriginal      BigInt?
  original_artist String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model update_tags {
  id         Int       @id @default(autoincrement())
  version_id Int?
  tags_added String?
  length     Int?      @db.SmallInt
  username   String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  versions   versions? @relation(fields: [version_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model venues {
  id             Int              @id @default(autoincrement())
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  name           String?
  city           String?
  state          String?
  country        String?
  notes          String?
  nicknames      String[]
  type           Venue?
  jams           jams[]
  jams_duplicate jams_duplicate[]
  sets           sets[]
  shows          shows[]
  versions       versions[]

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model versions {
  id                  Int           @id(map: "Versions_pkey") @default(autoincrement())
  date                String
  avg_rating          Float         @default(0) @db.Real
  location            String?
  submitter_name      String?
  artist              String
  song_id             Int
  user_id             String?       @db.Uuid
  listen_link         String?
  song_name           String?
  num_ratings         Int?          @default(0)
  song_submitter_name String?
  sounds              String[]
  set_id              Int?
  show_id             Int?
  sound_ids           BigInt?
  venue_id            Int?
  add_link            add_link[]
  update_tags         update_tags[]
  sets                sets?         @relation(fields: [set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shows               shows?        @relation(fields: [show_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  songs               songs         @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venues              venues?       @relation(fields: [venue_id], references: [id], onDelete: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model versions_duplicate {
  id                  Int                 @id @default(autoincrement())
  date                String
  avg_rating          Float               @default(0) @db.Real
  location            String?
  submitter_name      String?             @default("")
  artist              String
  song_id             Int
  user_id             String?             @db.Uuid
  listen_link         String?
  song_name           String?
  num_ratings         Int?                @default(0)
  song_submitter_name String?
  sounds              String[]
  ratings_duplicate   ratings_duplicate[]
  songs               songs               @relation(fields: [song_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users               users?              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model favorites {
  id          Int            @id @default(autoincrement())
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  user_id     String?        @db.Uuid
  entity_type MusicalEntity?
  entity_id   Int?
  profiles    profiles?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, entity_id, entity_type], map: "userid_entityid_entitytype_unique")
  @@schema("public")
}

model likes {
  id          Int            @id @default(autoincrement())
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  user_id     String?        @db.Uuid
  entity_type MusicalEntity?
  entity_id   Int?
  profiles    profiles?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum Continent {
  North_America @map("North America")
  Europe
  South_America @map("South America")
  Asia
  Australia
  Africa

  @@schema("public")
}

enum DataSource {
  Songfish
  Phishnet
  SetlistFM

  @@schema("public")
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum MusicalEntity {
  Jam
  Set
  Show
  Album
  Song

  @@schema("public")
}

enum Region {
  Northeast
  South
  Midwest
  East_Coast        @map("East Coast")
  West
  West_Coast        @map("West Coast")
  Pacific_Northwest @map("Pacific Northwest")
  Southeast
  Southwest
  Great_Lakes       @map("Great Lakes")

  @@schema("public")
}

enum Season {
  Spring
  Summer
  Fall
  Winter

  @@schema("public")
}

enum SetNumber {
  set_1    @map("set 1")
  set_2    @map("set 2")
  set_3    @map("set 3")
  encore
  late_set @map("late set")

  @@schema("public")
}

enum Venue {
  Stadium
  Arena
  Amphitheater
  Theater
  Club
  Bar
  House
  Farm
  Festival
  Street
  Other
  Park

  @@schema("public")
}

enum idea {
  Artist
  Feature
  Tag
  Other

  @@schema("public")
}
